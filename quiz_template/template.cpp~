//templates
//function
template<typename T>
inline void FAST_copy(T& dest, T& src)
{
  dest = src;
}

//TO_DO  ***********
//please write a template specilization for this template function with a class "special_class" 
template<> inline void FAST_copy<char> (char& dest, char& src) 
{
  dest = src;
}; 


//class
// file my2D.h
template<class X, class Y>
class my2D
{
	X x;
	Y y;
public:
	my2D(X x, Y y){
//TO_DO  ***********
//codes here to set the data member x and y  ************
	  this->x = x;
	  this->y = y;
	}
	X getX();
	Y getY();
};

//TO_DO  ***********
//create a new template class my2D_child which inherits from
//this template with new member function length(), 
template<class X, class Y, class T> 
class my2D_child:public my2D<X, Y> {
  T length();
}
//write a template specilization of my2D_child for (X=string, Y=string)
// 	

//file my2D.cpp
//#include "my2D.h"
//TO_DO *********************
//impletment the function getX and getY in file my2D.cpp
template<class X, class Y, class T> 
X my2D::getX() {
  return x;
}
template<class X, class Y, class T>
Y my2D::getY() {
  return y;
}
//TO_DO *********************
//implement this length function of my2D_child to return x*x+y*y
//
template<class X, class Y, class T>
T my2D::length() {
  return (T) x * x + y * y;
}
//add a main function in this cpp file with following
int main()
{
//TO_DO *******************
//to use this my2D template for cases (X=int(3), Y=int(4)), (X=float(5.5), Y=float(6.6), 
  int X = 3;
  int Y = 4;
  my2D m(X, Y);
  float X1 = 5.5;
  float Y1 = 6.6;
  my2D m1(X1, Y1);
  
//TO_DO ********************
//print an output of my2D_child's length for (X="I need ", Y="Time to finish")
  
return 0;
}
